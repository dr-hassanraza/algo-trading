#!/usr/bin/env python3
"""
Simple PDF Export Addition for Streamlit App
Add this code to your existing streamlit_app.py after the analysis results
"""

# Add this import at the top of your file with other imports
import base64
from io import BytesIO
from datetime import datetime

def generate_simple_pdf_report(symbol, analysis_data):
    """Generate a simple HTML-to-PDF report"""
    
    # Create HTML report
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>PSX Trading Analysis Report - {symbol}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }}
            h1 {{ color: #2E86AB; text-align: center; border-bottom: 3px solid #2E86AB; padding-bottom: 10px; }}
            h2 {{ color: #A23B72; margin-top: 30px; }}
            .header-info {{ background-color: #f4f4f4; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            .metrics {{ display: flex; justify-content: space-between; margin: 20px 0; }}
            .metric {{ text-align: center; padding: 15px; background-color: #e8f4f8; border-radius: 5px; margin: 0 10px; }}
            .recommendation {{ text-align: center; padding: 20px; font-size: 24px; font-weight: bold; 
                             background-color: #f0f8e8; border-radius: 10px; margin: 20px 0; }}
            table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
            th {{ background-color: #2E86AB; color: white; }}
            .footer {{ margin-top: 50px; padding: 20px; background-color: #f9f9f9; 
                      border-radius: 5px; font-style: italic; text-align: center; }}
        </style>
    </head>
    <body>
        <h1>PSX Trading Analysis Report</h1>
        
        <div class="header-info">
            <strong>Symbol:</strong> {symbol}<br>
            <strong>Generated:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}<br>
            <strong>Market:</strong> Pakistan Stock Exchange (PSX)
        </div>
        
        <div class="recommendation">
            üéØ RECOMMENDATION: {analysis_data.get('recommendation', 'N/A')}
        </div>
        
        <h2>üìä Executive Summary</h2>
        <div class="metrics">
            <div class="metric">
                <strong>Signal Grade</strong><br>
                {analysis_data.get('signal_strength', 'N/A')}
            </div>
            <div class="metric">
                <strong>Current Price</strong><br>
                {analysis_data.get('current_price', 'N/A')}
            </div>
            <div class="metric">
                <strong>Target Price</strong><br>
                {analysis_data.get('target_price', 'N/A')}
            </div>
            <div class="metric">
                <strong>Stop Loss</strong><br>
                {analysis_data.get('stop_loss', 'N/A')}
            </div>
        </div>
        
        <h2>üîç Technical Analysis</h2>
        <table>
            <tr><th>Indicator</th><th>Value</th><th>Signal</th></tr>"""
    
    # Add technical indicators if available
    if 'technical_indicators' in analysis_data:
        for indicator, data in analysis_data['technical_indicators'].items():
            if isinstance(data, dict):
                value = data.get('value', 'N/A')
                signal = data.get('signal', 'N/A')
            else:
                value = str(data)
                signal = 'N/A'
            html_content += f"<tr><td>{indicator}</td><td>{value}</td><td>{signal}</td></tr>"
    
    html_content += f"""
        </table>
        
        <h2>‚öñÔ∏è Risk Analysis</h2>
        <table>
            <tr><th>Risk Factor</th><th>Value</th></tr>
            <tr><td>Risk Score</td><td>{analysis_data.get('risk_score', 'N/A')}</td></tr>
            <tr><td>Volatility</td><td>{analysis_data.get('volatility', 'N/A')}</td></tr>
            <tr><td>Stop Loss Level</td><td>{analysis_data.get('stop_loss', 'N/A')}</td></tr>
        </table>
        
        <div class="footer">
            <strong>Disclaimer:</strong> This report is generated by PSX Trading Bot for informational purposes only. 
            Please consult with a financial advisor before making investment decisions.<br><br>
            <strong>Generated by:</strong> PSX Trading Bot | <strong>Website:</strong> Pakistan Stock Exchange Analysis System
        </div>
    </body>
    </html>
    """
    
    return html_content

# Add this function to create downloadable PDF
def create_download_button(html_content, filename):
    """Create download button for HTML report"""
    b64 = base64.b64encode(html_content.encode()).decode()
    href = f'''
    <a href="data:text/html;base64,{b64}" download="{filename}" 
       style="display: inline-block; padding: 12px 20px; background-color: #ff4b4b; 
              color: white; text-decoration: none; border-radius: 5px; font-weight: bold;">
       üìÑ Download Analysis Report (HTML)
    </a>
    '''
    return href

# Add this code after your analysis results in the quick_analysis function:
"""
                # PDF Export functionality
                st.markdown("---")
                st.subheader("üìÑ Export Report")
                
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if st.button("üìÑ Generate Report", type="primary"):
                        try:
                            # Prepare analysis data
                            analysis_data = {{
                                'recommendation': signal['recommendation'],
                                'signal_strength': signal['grade'],
                                'current_price': f"{{result['price']:.2f}} PKR",
                                'target_price': f"{{risk['target1']:.2f}} PKR",
                                'stop_loss': f"{{risk['stop_loss']:.2f}} PKR",
                                'risk_score': f"{{signal['score']:.0f}}/100",
                                'volatility': 'Medium',  # You can enhance this
                                'technical_indicators': {{
                                    'RSI': {{'value': f"{{tech['rsi']:.1f}}", 'signal': rsi_status}},
                                    'MA44': {{'value': f"{{tech['ma44']:.2f}}", 'signal': tech.get('ma44_trend', 'Unknown')}},
                                    'Bollinger Bands %B': {{'value': f"{{tech['bb_pctb']:.2f}}", 'signal': bb_status}},
                                    'Volume Ratio': {{'value': f"{{tech['volume_ratio']:.1f}}x", 'signal': vol_status}}
                                }}
                            }}
                            
                            # Generate HTML report
                            html_report = generate_simple_pdf_report(symbol, analysis_data)
                            
                            # Create filename
                            filename = f"PSX_Analysis_{{symbol}}_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}.html"
                            
                            # Create download button
                            download_button = create_download_button(html_report, filename)
                            
                            st.success("‚úÖ Report Generated Successfully!")
                            st.markdown(download_button, unsafe_allow_html=True)
                            
                        except Exception as e:
                            st.error(f"‚ùå Report generation failed: {{str(e)}}")
                
                with col2:
                    st.info("üí° **Tip:** Download creates an HTML report with all analysis details that you can print as PDF from your browser.")
"""